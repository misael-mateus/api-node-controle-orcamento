#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('orcamento-familiar:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

let db = [
    {'id': 1, 'nome': 'João', 'sobrenome': 'Silva', 'idade': '20'},
    {'id': 2, 'nome': 'Maria', 'sobrenome': 'Santos', 'idade': '30'},
    {'id': 3, 'nome': 'José', 'sobrenome': 'Pereira', 'idade': '40'},
    {'id': 4, 'nome': 'Pedro', 'sobrenome': 'Souza', 'idade': '50'},
    {'id': 5, 'nome': 'João', 'sobrenome': 'Silva', 'idade': '20'},
    {'id': 6, 'nome': 'Maria', 'sobrenome': 'Santos', 'idade': '30'},
    {'id': 7, 'nome': 'José', 'sobrenome': 'Pereira', 'idade': '40'},
    {'id': 8, 'nome': 'Pedro', 'sobrenome': 'Souza', 'idade': '50'},
    {'id': 9, 'nome': 'João', 'sobrenome': 'Silva', 'idade': '20'},
    {'id': 10, 'nome': 'Maria', 'sobrenome': 'Santos', 'idade': '30'},
    {'id': 11, 'nome': 'José', 'sobrenome': 'Pereira', 'idade': '40'},
]

app.get('/db', (req, res) => {
    res.send(db)
})

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
    console.log('Servidor rodando na porta: ' + port);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
